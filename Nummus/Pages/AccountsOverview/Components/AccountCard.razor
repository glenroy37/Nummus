@using Nummus.Service
@using Nummus.Data
@using Nummus.Shared.Components
@inject FormatService FormatService
@inject IAccountService AccountService
@inject IMatDialogService MatDialogService
@inject IBookingLineService BookingLineService
<div class="account-card">
    <div class="flex flex-space-between">
        <div>
            <MatHeadline6 class="margin-1">@Account.Name</MatHeadline6>
        </div>
        <div class="flex flex-align-center">
            <MatIconButton Class="force-white-text margin-right"
                           OnClick="@OpenBookingLineDialog">
                <MatIcon Icon="add_box"/>
            </MatIconButton>
        </div>
    </div>
    <div class="flex flex-space-between">
        <div>
            <MatSubtitle2 Class="margin-left-1 margin-top-0">
                @FormatService.FormatToLocalCurrency(AccountService.GetCurrentAccountBalance(Account.Id))
            </MatSubtitle2>
        </div>
        <div class="flex flex-align-center">
            <MatIconButton Class="force-white-text margin-right"
                       OnClick="@ToggleTransactions">
                
                @if (_showTransactions) {
                    <MatIcon Icon="keyboard_arrow_up" />
                } else {
                    <MatIcon Icon="keyboard_arrow_down" />
                }
            </MatIconButton>
        </div>
    </div>
    @if (_showTransactions) {
        <MatDivider />
        @foreach (var bookingLine in _bookingLines) {
            <BookingLineRow BookingLine="@bookingLine" />
        }
        
        <Paginator PageSize=@PageSize 
                   ItemCount=@_transactionCount 
                   OnPageChange=@LoadPage />
    }
</div>

<MatDialog IsOpen="@_addBookingLineDialogOpen">
    <MatDialogTitle Class="force-white-text">Add Booking Line</MatDialogTitle>
    <MatDialogContent>
        <div class="margin-1">
            <MatTextField @bind-Value="@_newBookingLine.BookingText" Label="Booking line text" />
        </div>
        <div class="margin-1">
            <MatTextField @bind-Value="@_newBookingLine.Amount" TValue="decimal" Label="Booking line amount" />
        </div>
        <div class="margin-1">
            <MatDatePicker @bind-Value="@_newBookingLine.BookingTime" EnableTime="true" />
        </div>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@CloseBookingLineDialog">Cancel</MatButton>
        <MatButton OnClick="@SaveBookingLine">Save</MatButton>
    </MatDialogActions>
</MatDialog>

@code {
    [Parameter]
    public Account Account { get; set; }

    private int PageSize = 10;
    private bool _addBookingLineDialogOpen;
    private bool _showTransactions;
    private int _currentTransactionsPage = 0;
    private int _transactionCount = 12;
    private List<MatPageSizeOption> _matPageSizeOptions = new() {
        new (10, "10"),
        new (25, "25"),
        new (100, "100")
    };
    private BookingLine[] _bookingLines = {};
    private BookingLine _newBookingLine = new BookingLine();

    void OpenBookingLineDialog() {
        _addBookingLineDialogOpen = true;
    }

    void ToggleTransactions() {
        _showTransactions = !_showTransactions;
    }

    void CloseBookingLineDialog() {
        _newBookingLine = new BookingLine();
        _addBookingLineDialogOpen = false;
    }

    void LoadPage(int pageNumber) {
        _bookingLines = BookingLineService.GetBookingLinesPaged(Account.Id, PageSize, pageNumber);
        _currentTransactionsPage = pageNumber;
    }

    void SaveBookingLine() {
        BookingLineService.CreateBookingLine(Account.Id, _newBookingLine);
        _transactionCount = BookingLineService.CountBookingLines(Account.Id);
        LoadPage(_currentTransactionsPage);
        CloseBookingLineDialog();
    }

    protected override void OnParametersSet() {
        _transactionCount = BookingLineService.CountBookingLines(Account.Id);
        LoadPage(_currentTransactionsPage);
        base.OnInitialized();
    }
}
