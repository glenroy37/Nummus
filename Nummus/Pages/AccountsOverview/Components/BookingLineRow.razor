@using Nummus.Service
@using Nummus.Data
@inject FormatService FormatService
@inject IBookingLineService BookingLineService
<div class="flex flex-align-center">
    <div>
        @BookingLine.BookingTime.ToString("dd/MM/yy HH:mm")
    </div>
    <div class="flex-grow padding-left-1">
        @BookingLine.BookingText
    </div>

    @if (BookingLine.AccountStatement == null) {
        <div>
            <MatIconButton Class="force-white-text margin-right"
                           OnClick="@OpenDeleteDialog">
                <MatIcon Icon="delete"/>
            </MatIconButton>
        </div>
        <div>
            <MatIconButton Class="force-white-text margin-right"
                           OnClick="@OpenBookingLineDialog">
                <MatIcon Icon="edit"/>
            </MatIconButton>
        </div>
    }
    
    <div class="@(BookingLine.Amount < 0 ? "negative-colour" : "positive-colour")">
        @FormatService.FormatToLocalCurrency(BookingLine.Amount)
    </div>
</div>

<MatDialog IsOpen="@_editBookingLineDialogOpen">
    <MatDialogTitle Class="force-white-text">Edit Booking Line</MatDialogTitle>
    <MatDialogContent>
        <BookingLineForm BookingLine="_editedBookingLine" />
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@CloseBookingLineDialog">Cancel</MatButton>
        <MatButton OnClick="@SaveBookingLine">Save</MatButton>
    </MatDialogActions>
</MatDialog>

<MatDialog IsOpen="@_deleteBookingLineDialogOpen">
    <MatDialogTitle Class="force-white-text">Do you really want to delete that booking line?</MatDialogTitle>
        <MatDialogActions>
            <MatButton OnClick="@CloseDeleteDialog">No</MatButton>
            <MatButton OnClick="@DeleteBookingLine">Yes</MatButton>
        </MatDialogActions>
</MatDialog>

@code {
    [Parameter]
    public BookingLine BookingLine { get; set; }

    [Parameter]
    public EventCallback OnBookingLineChange { get; set; }
    
    [Parameter]
    public EventCallback OnBookingLineDeleted { get; set; }

    private BookingLine _editedBookingLine = new();
    private bool _editBookingLineDialogOpen;
    private bool _deleteBookingLineDialogOpen;

    private void OpenBookingLineDialog() {
        _editBookingLineDialogOpen = true;
    }

    private void CloseBookingLineDialog() {
        ResetChanges();
        _editBookingLineDialogOpen = false;
    }

    private void SaveBookingLine() {
        BookingLine.BookingText = _editedBookingLine.BookingText;
        BookingLine.Amount = _editedBookingLine.Amount;
        BookingLine.BookingTime = _editedBookingLine.BookingTime;
        BookingLine.Category = _editedBookingLine.Category;
        BookingLineService.SaveBookingLine(BookingLine);
        OnBookingLineChange.InvokeAsync();
        _editBookingLineDialogOpen = false;
    }

    private void OpenDeleteDialog() {
        _deleteBookingLineDialogOpen = true;
    }

    private void CloseDeleteDialog() {
        _deleteBookingLineDialogOpen = false;
    }
    
    private void DeleteBookingLine() {
        _deleteBookingLineDialogOpen = false;
        BookingLineService.DeleteBookingLine(BookingLine);
        OnBookingLineDeleted.InvokeAsync();
    }

    protected override void OnParametersSet() {
        ResetChanges();
        base.OnParametersSet();
    }

    private void ResetChanges() {
        _editedBookingLine.BookingText = BookingLine.BookingText;
        _editedBookingLine.Amount = BookingLine.Amount;
        _editedBookingLine.BookingTime = BookingLine.BookingTime;
        _editedBookingLine.Category = BookingLine.Category;
    }
}