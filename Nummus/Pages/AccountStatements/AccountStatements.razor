@page "/account-statements"
@using Nummus.Service
@using Nummus.Data
@using Nummus.Shared.Components
@inject IAccountStatementService AccountStatementService
@inject FormatService FormatService
<h1 class="margin-left-2">Account Statements</h1>
<div class="margin-left-2">
    @{ var generatableStatement = AccountStatementService.GeneretableStatement();}
    @if (generatableStatement != null) {
        <MatButton OnClick="@(() => { AccountStatementService.GenerateStatement(); })">
            Generate @generatableStatement.Value.Month / @generatableStatement.Value.Year
        </MatButton>
    } else {
        <p>
            There are no new statements generatable.
        </p>
    }
</div>

<div class="margin-left-2">
    <MonthPaginator CurrentMonth = "@_currentMonth"
                    OnMonthChange = "@OnMonthChange"/>
    @if (_currentAccountStatements.Length == 0) {
        <p>There are no statements for the selected month.</p>
    }
    @foreach (var statements in _currentAccountStatements) {
        <p>
            @statements.Account.Name: @FormatService.FormatToLocalCurrency(statements.ClosingSum)
        </p>
    }
</div>

@code {
    private AccountStatement[] _currentAccountStatements = Array.Empty<AccountStatement>();
    private DateTime _currentMonth;

    private void OnMonthChange(DateTime newMonth) {
        _currentMonth = newMonth;
        _currentAccountStatements = AccountStatementService.GetStatementsOf(_currentMonth.Month, _currentMonth.Year);
    }
    
    protected override void OnInitialized() {
        _currentAccountStatements = AccountStatementService.GetLatestStatements();
        if (_currentAccountStatements.Length != 0) {
            _currentMonth = _currentAccountStatements[0].BookingDate;
        }
        base.OnInitialized();
    }
}